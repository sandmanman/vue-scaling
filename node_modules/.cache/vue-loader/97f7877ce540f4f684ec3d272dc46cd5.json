{"remainingRequest":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangyufan/em/testPro/vue-scale/src/components/popconfirm/Popconfirm.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/zhangyufan/em/testPro/vue-scale/src/components/popconfirm/Popconfirm.vue","mtime":1573474128000},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/babel-loader/lib/index.js","mtime":1574242632071},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/ts-loader/index.js","mtime":1574332289889},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js","mtime":1574242648574}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport {\r\n  Component,\r\n  Model,\r\n  Prop,\r\n  Vue,\r\n  Watch,\r\n} from 'vue-property-decorator';\r\nimport { mixins } from 'vue-class-component';\r\nimport addDOMEventListener from 'add-dom-event-listener';\r\nimport TransferDom from '@/directives/transfer-dom';\r\nimport docClick from '@/directives/doclick';\r\nimport warningPath from './warning';\r\nimport WButton from '../button/Button.vue';\r\nimport Icon from '../icon/Icon.vue';\r\nimport {\r\n  setPostion,\r\n  getEventType,\r\n} from '@/helper/poper';\r\nimport poperMixin from '@/helper/popermixin';\r\nimport { noop } from '@/helper/noop';\r\n\r\nVue.directive('transfer-dom', (TransferDom as any));\r\n\r\nVue.directive('doc-click', (docClick as any));\r\n\r\ninterface ColorEntity {\r\n  ['border-top-color']?: string;\r\n  ['border-bottom-color']?: string;\r\n  ['border-left-color']?: string;\r\n  ['border-right-color']?: string;\r\n}\r\n\r\n@Component({\r\n  components: {\r\n    WButton,\r\n    Icon,\r\n  },\r\n})\r\nexport default class Popconfirm extends mixins(poperMixin) {\r\n  warningPath: string = warningPath;\r\n\r\n  status: boolean = false;\r\n\r\n  resizeEvent: any = null;\r\n\r\n  clickEvent: any = null;\r\n\r\n  @Model('model', { type: Boolean }) readonly value!: boolean;\r\n\r\n  @Prop({\r\n    type: Boolean,\r\n    default: true,\r\n  }) private transfer!: boolean;\r\n\r\n  @Prop(Boolean) private loading!: boolean;\r\n\r\n  @Prop({\r\n    type: Number,\r\n    default: 4,\r\n  }) private interval!: number;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: 'top',\r\n  }) private placement!: string;\r\n\r\n  @Prop({ // 预设，目前不支持\r\n    type: String,\r\n    default: 'click',\r\n  }) private trigger!: string;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: '取消',\r\n  }) private cancelText!: string;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: '确定',\r\n  }) private okText!: string;\r\n\r\n  @Prop(Function) private getContainer!: Function;\r\n\r\n  @Prop({\r\n    type: Function,\r\n    default() {\r\n      return new Promise((resolve) => {\r\n        resolve();\r\n      });\r\n    },\r\n  }) private before!: Function;\r\n\r\n  @Prop({\r\n    type: Function,\r\n    default: noop,\r\n  }) private change!: Function;\r\n\r\n  @Prop({\r\n    type: Function,\r\n    default: noop,\r\n  }) private cancel!: Function;\r\n\r\n  @Prop({\r\n    type: Function,\r\n    default: noop,\r\n  }) private ok!: Function;\r\n\r\n  @Prop([String, Object, Array]) private className!: string | object | any[];\r\n\r\n  get popconfirmClass(): any[] {\r\n    return [\r\n      {\r\n        'w-popconfirm-horbottom': this.isHorBottom,\r\n        'w-popconfirm-hortop': this.isHorTop,\r\n        'w-popconfirm-horleft': this.isVerLeft,\r\n        'w-popconfirm-horright': this.isVerRight,\r\n      },\r\n    ];\r\n  }\r\n\r\n  get arrowClass(): any[] {\r\n    return [\r\n      {\r\n        'w-popconfirm-arrow-hortop': this.isHorTop,\r\n        'w-popconfirm-arrow-horbottom': this.isHorBottom,\r\n        'w-popconfirm-arrow-verendright': this.isVerEndRight,\r\n        'w-popconfirm-arrow-verendleft': this.isVerEndLeft,\r\n        'w-popconfirm-arrow-vercenter': this.isVerCenter,\r\n\r\n        'w-popconfirm-arrow-horleft': this.isVerLeft,\r\n        'w-popconfirm-arrow-horright': this.isVerRight,\r\n        'w-popconfirm-arrow-horendbottom': this.isHorEndBottom,\r\n        'w-popconfirm-arrow-horendtop': this.isVerEndTop,\r\n        'w-popconfirm-arrow-horcenter': this.isHorCenter,\r\n      },\r\n    ];\r\n  }\r\n\r\n  mounted() {\r\n    this.setStatus(this.value, true);\r\n    this.resizeEvent = addDOMEventListener(window, 'resize', this.resizeChange);\r\n  }\r\n\r\n  beforeDestroy() {\r\n    this.resizeEvent.remove();\r\n  }\r\n\r\n  resizeChange() {\r\n    setPostion(this, 'popconfirm');\r\n  }\r\n\r\n  isTrigger(ev: MouseEvent): boolean {\r\n    return getEventType(ev.type) === this.trigger;\r\n  }\r\n\r\n  triggerHandle(ev: MouseEvent) {\r\n    this.setStatus(!this.status, this.isTrigger(ev), true);\r\n  }\r\n\r\n  bodyClick(ev: MouseEvent) {\r\n    if (this.status) {\r\n      this.setStatus(false, this.isTrigger(ev), true);\r\n    }\r\n  }\r\n\r\n  setStatus(val: boolean, change: boolean, emit?: boolean) {\r\n    if (change) {\r\n      this.status = val;\r\n      this.resizeChange();\r\n    }\r\n    if (change && emit) {\r\n      this.change(this.status);\r\n      this.$emit('change', this.status);\r\n      this.$emit('model', this.status);\r\n    }\r\n  }\r\n\r\n  cancelFn({ ev }: any) {\r\n    if (!this.loading) {\r\n      this.changeStatus(ev, 'cancel');\r\n    }\r\n  }\r\n\r\n  okFn({ ev }: any) {\r\n    this.before().then(() => {\r\n      this.$nextTick(() => {\r\n        this.changeStatus(ev, 'ok');\r\n      });\r\n    });\r\n  }\r\n\r\n  changeStatus(ev: MouseEvent, type: string) {\r\n    this.triggerHandle(ev);\r\n    ((this as any)[type] as Function)(this.status);\r\n    this.$emit(type, this.status);\r\n  }\r\n\r\n  popoverClick(ev: MouseEvent) {\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  @Watch('value')\r\n  watchValue(val: boolean) {\r\n    this.setStatus(val, true);\r\n  }\r\n}\r\n",{"version":3,"sources":["Popconfirm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Popconfirm.vue","sourceRoot":"src/components/popconfirm","sourcesContent":["<template>\r\n  <div\r\n    class=\"w-popconfirm-alert\"\r\n    :class=\"className\"\r\n    @click=\"triggerHandle($event)\"\r\n    v-doc-click=\"bodyClick\"\r\n    ref=\"popconfirm\"\r\n  >\r\n    <slot></slot>\r\n    <transition name=\"fade\">\r\n      <div\r\n        class=\"w-popconfirm\"\r\n        :class=\"popconfirmClass\"\r\n        ref=\"popElem\"\r\n        v-show=\"status\"\r\n        v-transfer-dom=\"getContainer && getContainer()\"\r\n        :data-transfer=\"transfer\"\r\n        @click=\"popoverClick($event)\"\r\n      >\r\n        <i class=\"w-popconfirm-arrow\" :class=\"arrowClass\"></i>\r\n        <div class=\"w-popconfirm-main\">\r\n          <div class=\"w-popconfirm-core\" v-if=\"$slots.content\">\r\n            <Icon className=\"w-popconfirm-icon\">\r\n              <svg\r\n                class=\"icon\"\r\n                width=\"16px\"\r\n                height=\"16px\"\r\n                viewBox=\"0 0 16 16\"\r\n                version=\"1.1\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n              >\r\n                <path :d=\"warningPath\" fill=\"#ffa430\" />\r\n              </svg>\r\n            </Icon>\r\n            <div class=\"w-popconfirm-content\">\r\n              <slot name=\"content\"></slot>\r\n            </div>\r\n          </div>\r\n          <div class=\"w-popconfirm-buttons\">\r\n            <w-button\r\n              class=\"w-popconfirm-button\"\r\n              size=\"small\"\r\n              :stop=\"true\"\r\n              type=\"border\"\r\n              @click=\"cancelFn($event)\"\r\n            >{{cancelText}}</w-button>\r\n            <w-button\r\n              class=\"w-popconfirm-button\"\r\n              size=\"small\"\r\n              :stop=\"true\"\r\n              :loading=\"loading\"\r\n              type=\"primary\"\r\n              @click=\"okFn($event)\"\r\n            >{{okText}}</w-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </transition>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Model,\r\n  Prop,\r\n  Vue,\r\n  Watch,\r\n} from 'vue-property-decorator';\r\nimport { mixins } from 'vue-class-component';\r\nimport addDOMEventListener from 'add-dom-event-listener';\r\nimport TransferDom from '@/directives/transfer-dom';\r\nimport docClick from '@/directives/doclick';\r\nimport warningPath from './warning';\r\nimport WButton from '../button/Button.vue';\r\nimport Icon from '../icon/Icon.vue';\r\nimport {\r\n  setPostion,\r\n  getEventType,\r\n} from '@/helper/poper';\r\nimport poperMixin from '@/helper/popermixin';\r\nimport { noop } from '@/helper/noop';\r\n\r\nVue.directive('transfer-dom', (TransferDom as any));\r\n\r\nVue.directive('doc-click', (docClick as any));\r\n\r\ninterface ColorEntity {\r\n  ['border-top-color']?: string;\r\n  ['border-bottom-color']?: string;\r\n  ['border-left-color']?: string;\r\n  ['border-right-color']?: string;\r\n}\r\n\r\n@Component({\r\n  components: {\r\n    WButton,\r\n    Icon,\r\n  },\r\n})\r\nexport default class Popconfirm extends mixins(poperMixin) {\r\n  warningPath: string = warningPath;\r\n\r\n  status: boolean = false;\r\n\r\n  resizeEvent: any = null;\r\n\r\n  clickEvent: any = null;\r\n\r\n  @Model('model', { type: Boolean }) readonly value!: boolean;\r\n\r\n  @Prop({\r\n    type: Boolean,\r\n    default: true,\r\n  }) private transfer!: boolean;\r\n\r\n  @Prop(Boolean) private loading!: boolean;\r\n\r\n  @Prop({\r\n    type: Number,\r\n    default: 4,\r\n  }) private interval!: number;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: 'top',\r\n  }) private placement!: string;\r\n\r\n  @Prop({ // 预设，目前不支持\r\n    type: String,\r\n    default: 'click',\r\n  }) private trigger!: string;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: '取消',\r\n  }) private cancelText!: string;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: '确定',\r\n  }) private okText!: string;\r\n\r\n  @Prop(Function) private getContainer!: Function;\r\n\r\n  @Prop({\r\n    type: Function,\r\n    default() {\r\n      return new Promise((resolve) => {\r\n        resolve();\r\n      });\r\n    },\r\n  }) private before!: Function;\r\n\r\n  @Prop({\r\n    type: Function,\r\n    default: noop,\r\n  }) private change!: Function;\r\n\r\n  @Prop({\r\n    type: Function,\r\n    default: noop,\r\n  }) private cancel!: Function;\r\n\r\n  @Prop({\r\n    type: Function,\r\n    default: noop,\r\n  }) private ok!: Function;\r\n\r\n  @Prop([String, Object, Array]) private className!: string | object | any[];\r\n\r\n  get popconfirmClass(): any[] {\r\n    return [\r\n      {\r\n        'w-popconfirm-horbottom': this.isHorBottom,\r\n        'w-popconfirm-hortop': this.isHorTop,\r\n        'w-popconfirm-horleft': this.isVerLeft,\r\n        'w-popconfirm-horright': this.isVerRight,\r\n      },\r\n    ];\r\n  }\r\n\r\n  get arrowClass(): any[] {\r\n    return [\r\n      {\r\n        'w-popconfirm-arrow-hortop': this.isHorTop,\r\n        'w-popconfirm-arrow-horbottom': this.isHorBottom,\r\n        'w-popconfirm-arrow-verendright': this.isVerEndRight,\r\n        'w-popconfirm-arrow-verendleft': this.isVerEndLeft,\r\n        'w-popconfirm-arrow-vercenter': this.isVerCenter,\r\n\r\n        'w-popconfirm-arrow-horleft': this.isVerLeft,\r\n        'w-popconfirm-arrow-horright': this.isVerRight,\r\n        'w-popconfirm-arrow-horendbottom': this.isHorEndBottom,\r\n        'w-popconfirm-arrow-horendtop': this.isVerEndTop,\r\n        'w-popconfirm-arrow-horcenter': this.isHorCenter,\r\n      },\r\n    ];\r\n  }\r\n\r\n  mounted() {\r\n    this.setStatus(this.value, true);\r\n    this.resizeEvent = addDOMEventListener(window, 'resize', this.resizeChange);\r\n  }\r\n\r\n  beforeDestroy() {\r\n    this.resizeEvent.remove();\r\n  }\r\n\r\n  resizeChange() {\r\n    setPostion(this, 'popconfirm');\r\n  }\r\n\r\n  isTrigger(ev: MouseEvent): boolean {\r\n    return getEventType(ev.type) === this.trigger;\r\n  }\r\n\r\n  triggerHandle(ev: MouseEvent) {\r\n    this.setStatus(!this.status, this.isTrigger(ev), true);\r\n  }\r\n\r\n  bodyClick(ev: MouseEvent) {\r\n    if (this.status) {\r\n      this.setStatus(false, this.isTrigger(ev), true);\r\n    }\r\n  }\r\n\r\n  setStatus(val: boolean, change: boolean, emit?: boolean) {\r\n    if (change) {\r\n      this.status = val;\r\n      this.resizeChange();\r\n    }\r\n    if (change && emit) {\r\n      this.change(this.status);\r\n      this.$emit('change', this.status);\r\n      this.$emit('model', this.status);\r\n    }\r\n  }\r\n\r\n  cancelFn({ ev }: any) {\r\n    if (!this.loading) {\r\n      this.changeStatus(ev, 'cancel');\r\n    }\r\n  }\r\n\r\n  okFn({ ev }: any) {\r\n    this.before().then(() => {\r\n      this.$nextTick(() => {\r\n        this.changeStatus(ev, 'ok');\r\n      });\r\n    });\r\n  }\r\n\r\n  changeStatus(ev: MouseEvent, type: string) {\r\n    this.triggerHandle(ev);\r\n    ((this as any)[type] as Function)(this.status);\r\n    this.$emit(type, this.status);\r\n  }\r\n\r\n  popoverClick(ev: MouseEvent) {\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  @Watch('value')\r\n  watchValue(val: boolean) {\r\n    this.setStatus(val, true);\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  @import \"popconfirm.scss\";\r\n</style>\r\n"]}]}