{"remainingRequest":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangyufan/em/testPro/vue-scale/src/components/progress/ProgressCircle.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/zhangyufan/em/testPro/vue-scale/src/components/progress/ProgressCircle.vue","mtime":1573474128000},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/css-loader/index.js","mtime":1573721989187},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1574242648574},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/postcss-loader/src/index.js","mtime":1573721998387},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/sass-loader/lib/loader.js","mtime":1574242652692},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js","mtime":1574242648574}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import './progress.scss';\n",{"version":3,"sources":["ProgressCircle.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyIA","file":"ProgressCircle.vue","sourceRoot":"src/components/progress","sourcesContent":["ProgressCircle\r\n<template>\r\n  <div\r\n    :style=\"{\r\n      height: width + 'px',\r\n      width: width + 'px',\r\n    }\">\r\n    <svg viewBox=\"0 0 100 100\">\r\n      <path\r\n        class=\"w-progress-circle__track\"\r\n        :d=\"trackPath\"\r\n        stroke=\"#eff1f6\"\r\n        :stroke-width=\"relativeStrokeWidth\"\r\n        fill=\"none\"\r\n        :style=\"trailPathStyle\"\r\n      ></path>\r\n      <path\r\n        class=\"w-progress-circle__path\"\r\n        :d=\"trackPath\"\r\n        :stroke=\"stroke\"\r\n        fill=\"none\"\r\n        :stroke-linecap=\"strokeLinecap\"\r\n        :stroke-width=\"value ? relativeStrokeWidth : 0\"\r\n        :style=\"circlePathStyle\"\r\n      ></path>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Model,\r\n  Prop,\r\n  Vue,\r\n} from 'vue-property-decorator';\r\nimport {\r\n  iconList,\r\n  IconListEntity,\r\n  ColorItemEntity,\r\n  getColorInArray,\r\n} from '@/components/progress/helper';\r\nimport { isString, isArray, isFunction } from '@/helper/type';\r\n\r\n@Component\r\nexport default class WProgressCircle extends Vue {\r\n  name: string = 'ProgressCircle';\r\n\r\n  iconList: IconListEntity = iconList;\r\n\r\n  @Model('model', { type: Number }) readonly value!: number;\r\n\r\n  @Prop(Number) private strokeWidth!: number;\r\n\r\n  @Prop({\r\n    type: Number,\r\n    default: 126,\r\n  }) private width!: number;\r\n\r\n  @Prop(String) private strokeLinecap!: string;\r\n\r\n  @Prop([String, Array, Function]) private color!: string | ColorItemEntity[] | Function;\r\n\r\n  @Prop(String) private status!: string;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: 'line', // circle\r\n  }) private type!: string;\r\n\r\n  get relativeStrokeWidth() {\r\n    return (this.strokeWidth / this.width * 100).toFixed(1);\r\n  }\r\n\r\n  get radius(): number {\r\n    if (this.type === 'circle' || this.type === 'dashboard') {\r\n      return parseInt(String(50 - parseFloat(this.relativeStrokeWidth) / 2), 10);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  get trackPath() {\r\n    const { radius } = this;\r\n    const isDashboard = this.type === 'dashboard';\r\n    return `\r\n      M 50 50\r\n      m 0 ${isDashboard ? '' : '-'}${radius}\r\n      a ${radius} ${radius} 0 1 1 0 ${isDashboard ? '-' : ''}${radius * 2}\r\n      a ${radius} ${radius} 0 1 1 0 ${isDashboard ? '' : '-'}${radius * 2}\r\n    `;\r\n  }\r\n\r\n  get perimeter(): number {\r\n    return 2 * Math.PI * this.radius;\r\n  }\r\n\r\n  get rate(): number {\r\n    return this.type === 'dashboard' ? 0.75 : 1;\r\n  }\r\n\r\n  get strokeDashoffset(): string {\r\n    const offset = -1 * this.perimeter * (1 - this.rate) / 2;\r\n    return `${offset}px`;\r\n  }\r\n\r\n  get trailPathStyle() {\r\n    return {\r\n      strokeDasharray: `${(this.perimeter * this.rate)}px, ${this.perimeter}px`,\r\n      strokeDashoffset: this.strokeDashoffset,\r\n    };\r\n  }\r\n\r\n  get circlePathStyle() {\r\n    return {\r\n      strokeDasharray: `${this.perimeter * this.rate * (this.value / 100)}px, ${this.perimeter}px`,\r\n      strokeDashoffset: this.strokeDashoffset,\r\n      transition: 'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease',\r\n    };\r\n  }\r\n\r\n  get stroke() {\r\n    let newColor: string = '#0297fe';\r\n\r\n    if (isString(this.color)) {\r\n      newColor = (this.color as string);\r\n    } else if (isArray(this.color)) {\r\n      newColor = getColorInArray((this.color as []), this.value);\r\n    } else if (isFunction(this.color)) {\r\n      newColor = (this.color as Function)(this.value);\r\n    }\r\n\r\n    return newColor;\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  @import './progress.scss';\r\n</style>\r\n"]}]}