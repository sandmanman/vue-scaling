{"remainingRequest":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangyufan/em/testPro/vue-scale/src/views/demo/Grid.vue?vue&type=template&id=1cb67330&","dependencies":[{"path":"/Users/zhangyufan/em/testPro/vue-scale/src/views/demo/Grid.vue","mtime":1573474128000},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1574242648574},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js","mtime":1574242648574}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\"h1\", [_vm._v(_vm._s(_vm.Grid))]),\n      _c(\"p\", [_vm._v(\"24 栅格系统。\")]),\n      _c(\"h2\", [_vm._v(\"概述\")]),\n      _c(\"p\", [\n        _vm._v(\n          \"布局的栅格化系统，我们是基于行（row）和列（col）来定义信息区块的外部框架，以保证页面的每个区域能够稳健地排布起来。下面简单介绍一下它的工作原理：\"\n        )\n      ]),\n      _vm._m(0),\n      _c(\"h2\", [_vm._v(\"代码演示\")]),\n      _c(\n        \"WRow\",\n        { attrs: { gutter: 16 } },\n        [\n          _c(\n            \"WCol\",\n            { attrs: { span: 24 } },\n            [\n              _c(\"OnlineReview\", {\n                attrs: {\n                  temCode: _vm.base.code,\n                  title: _vm.base.title,\n                  desc: _vm.base.desc\n                }\n              }),\n              _c(\"OnlineReview\", {\n                attrs: {\n                  temCode: _vm.gutter.code,\n                  title: _vm.gutter.title,\n                  desc: _vm.gutter.desc\n                }\n              }),\n              _c(\"OnlineReview\", {\n                attrs: {\n                  temCode: _vm.offset.code,\n                  title: _vm.offset.title,\n                  desc: _vm.offset.desc\n                }\n              }),\n              _c(\"OnlineReview\", {\n                attrs: {\n                  temCode: _vm.sort.code,\n                  title: _vm.sort.title,\n                  desc: _vm.sort.desc\n                }\n              }),\n              _c(\"OnlineReview\", {\n                attrs: {\n                  temCode: _vm.justify.code,\n                  title: _vm.justify.title,\n                  desc: _vm.justify.desc\n                }\n              }),\n              _c(\"OnlineReview\", {\n                attrs: {\n                  temCode: _vm.align.code,\n                  title: _vm.align.title,\n                  desc: _vm.align.desc\n                }\n              }),\n              _c(\"OnlineReview\", {\n                attrs: {\n                  temCode: _vm.order.code,\n                  title: _vm.order.title,\n                  desc: _vm.order.desc\n                }\n              }),\n              _c(\"OnlineReview\", {\n                attrs: {\n                  temCode: _vm.media.code,\n                  title: _vm.media.title,\n                  desc: _vm.media.desc\n                }\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\"h2\", [_vm._v(\"Row API\")]),\n      _c(\"ApiTable\", { attrs: { data: _vm.rowProps } }),\n      _c(\"h2\", [_vm._v(\"Col API\")]),\n      _c(\"ApiTable\", { attrs: { data: _vm.colProps } })\n    ],\n    1\n  )\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"通过 \"),\n        _c(\"code\", [_vm._v(\"row\")]),\n        _vm._v(\" 在水平方向建立一组 \"),\n        _c(\"code\", [_vm._v(\"column\")]),\n        _vm._v(\"（简写 col）\")\n      ]),\n      _c(\"li\", [\n        _vm._v(\"你的内容应当放置于 \"),\n        _c(\"code\", [_vm._v(\"col\")]),\n        _vm._v(\" 内，并且，只有 \"),\n        _c(\"code\", [_vm._v(\"col\")]),\n        _vm._v(\" 可以作为 \"),\n        _c(\"code\", [_vm._v(\"row\")]),\n        _vm._v(\" 的直接元素\")\n      ]),\n      _c(\"li\", [\n        _vm._v(\n          \"栅格系统中的列是指 1 到 24 的值来表示其跨越的范围。例如，三个等宽的列可以使用 \"\n        ),\n        _c(\"code\", [_vm._v(\".col-8\")]),\n        _vm._v(\" 来创建\")\n      ]),\n      _c(\"li\", [\n        _vm._v(\"如果一个 \"),\n        _c(\"code\", [_vm._v(\"row\")]),\n        _vm._v(\" 中的col总和超过 24，那么多余的 \"),\n        _c(\"code\", [_vm._v(\"col\")]),\n        _vm._v(\" 会作为一个整体另起一行排列\")\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}