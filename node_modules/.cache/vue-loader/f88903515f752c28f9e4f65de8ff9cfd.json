{"remainingRequest":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangyufan/em/testPro/vue-scale/src/components/affix/Affix.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/zhangyufan/em/testPro/vue-scale/src/components/affix/Affix.vue","mtime":1573474128000},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/babel-loader/lib/index.js","mtime":1574242632071},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/ts-loader/index.js","mtime":1574332289889},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js","mtime":1574242648574}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\r\nimport {\r\n  Component, Prop, Emit, Vue,\r\n} from 'vue-property-decorator';\r\nimport {\r\n  addObserved, removeObserved,\r\n} from './helper';\r\nimport getScroll from '../../helper/getscroll';\r\nimport getOffset from '../../helper/getoffset';\r\nimport { isNumber } from '../../helper/type';\r\n\r\ninterface AffixEntity {\r\n  [offsetPlace: string]: number;\r\n}\r\n\r\nexport interface ChangeEntity {\r\n  affixStatus: boolean;\r\n  scrollStatus: boolean;\r\n}\r\n\r\n@Component\r\nexport default class Affix extends Vue {\r\n  affixStyle: String = '';\r\n\r\n  target: Window = window;\r\n\r\n  @Prop(Number) private offsetTop!: number;\r\n\r\n  @Prop(Number) private offsetBottom!: number;\r\n\r\n  @Prop({\r\n    type: Number,\r\n    default: 10,\r\n  }) private index!: number;\r\n\r\n  @Prop(Boolean) private disabled!: boolean;\r\n\r\n  @Prop({\r\n    type: Boolean,\r\n    default: true,\r\n  }) private destroy!: boolean;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: 'fixed',\r\n  }) private position!: string;\r\n\r\n  @Prop({\r\n    type: Function,\r\n    default: () => {},\r\n  }) private change!: Function;\r\n\r\n  get offsetType(): string {\r\n    return isNumber(this.offsetBottom) ? 'bottom' : 'top';\r\n  }\r\n\r\n  get offsetValue(): number {\r\n    let valueDefault = 10;\r\n    if (isNumber(this.offsetTop)) {\r\n      valueDefault = this.offsetTop;\r\n    }\r\n    if (isNumber(this.offsetBottom)) {\r\n      valueDefault = this.offsetBottom;\r\n    }\r\n    return valueDefault;\r\n  }\r\n\r\n  get offsetIsTop(): boolean {\r\n    return this.offsetType === 'top';\r\n  }\r\n\r\n  mounted() {\r\n    addObserved(this.target, this.updatePostion);\r\n    this.updatePostion();\r\n  }\r\n\r\n  beforeDestroy() {\r\n    if (this.destroy) {\r\n      removeObserved(this.target);\r\n    }\r\n  }\r\n\r\n  @Emit('change')\r\n  updatePostion() {\r\n    const { offsetWidth, offsetHeight } = this.$el as HTMLElement;\r\n\r\n    const scrollTop = getScroll(this.target, true);\r\n    const elOffset = getOffset(this.$el as HTMLElement);\r\n    const windowHeight = window.innerHeight;\r\n    const isStatic: boolean = (\r\n      this.offsetIsTop\r\n        && (elOffset.top - this.offsetValue) <= scrollTop\r\n    )\r\n    || (\r\n      !this.offsetIsTop\r\n      && (\r\n        elOffset.top + this.offsetBottom + offsetHeight) > (scrollTop + windowHeight\r\n      )\r\n    );\r\n    const sticky: boolean = !this.disabled && isStatic;\r\n    const position = sticky ? `position: ${this.position}; zIndex: ${this.index};` : '';\r\n    const offset: string = sticky ? `${this.offsetType}: ${this.offsetValue}px; width: ${offsetWidth}px` : '';\r\n    this.affixStyle = `${position}${offset}`;\r\n\r\n    const changeEmit: ChangeEntity = {\r\n      affixStatus: sticky,\r\n      scrollStatus: isStatic,\r\n    };\r\n\r\n    this.change(changeEmit);\r\n\r\n    return changeEmit;\r\n  }\r\n}\r\n",{"version":3,"sources":["Affix.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA","file":"Affix.vue","sourceRoot":"src/components/affix","sourcesContent":["<template>\r\n  <div class=\"w-affix\">\r\n    <!-- 在定位的过程中位置会变，滚动之后刷新就会有问题 -->\r\n    <!-- 多套一层是为了获取位置 -->\r\n    <div :style=\"affixStyle\">\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script lang=\"ts\">\r\nimport {\r\n  Component, Prop, Emit, Vue,\r\n} from 'vue-property-decorator';\r\nimport {\r\n  addObserved, removeObserved,\r\n} from './helper';\r\nimport getScroll from '../../helper/getscroll';\r\nimport getOffset from '../../helper/getoffset';\r\nimport { isNumber } from '../../helper/type';\r\n\r\ninterface AffixEntity {\r\n  [offsetPlace: string]: number;\r\n}\r\n\r\nexport interface ChangeEntity {\r\n  affixStatus: boolean;\r\n  scrollStatus: boolean;\r\n}\r\n\r\n@Component\r\nexport default class Affix extends Vue {\r\n  affixStyle: String = '';\r\n\r\n  target: Window = window;\r\n\r\n  @Prop(Number) private offsetTop!: number;\r\n\r\n  @Prop(Number) private offsetBottom!: number;\r\n\r\n  @Prop({\r\n    type: Number,\r\n    default: 10,\r\n  }) private index!: number;\r\n\r\n  @Prop(Boolean) private disabled!: boolean;\r\n\r\n  @Prop({\r\n    type: Boolean,\r\n    default: true,\r\n  }) private destroy!: boolean;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: 'fixed',\r\n  }) private position!: string;\r\n\r\n  @Prop({\r\n    type: Function,\r\n    default: () => {},\r\n  }) private change!: Function;\r\n\r\n  get offsetType(): string {\r\n    return isNumber(this.offsetBottom) ? 'bottom' : 'top';\r\n  }\r\n\r\n  get offsetValue(): number {\r\n    let valueDefault = 10;\r\n    if (isNumber(this.offsetTop)) {\r\n      valueDefault = this.offsetTop;\r\n    }\r\n    if (isNumber(this.offsetBottom)) {\r\n      valueDefault = this.offsetBottom;\r\n    }\r\n    return valueDefault;\r\n  }\r\n\r\n  get offsetIsTop(): boolean {\r\n    return this.offsetType === 'top';\r\n  }\r\n\r\n  mounted() {\r\n    addObserved(this.target, this.updatePostion);\r\n    this.updatePostion();\r\n  }\r\n\r\n  beforeDestroy() {\r\n    if (this.destroy) {\r\n      removeObserved(this.target);\r\n    }\r\n  }\r\n\r\n  @Emit('change')\r\n  updatePostion() {\r\n    const { offsetWidth, offsetHeight } = this.$el as HTMLElement;\r\n\r\n    const scrollTop = getScroll(this.target, true);\r\n    const elOffset = getOffset(this.$el as HTMLElement);\r\n    const windowHeight = window.innerHeight;\r\n    const isStatic: boolean = (\r\n      this.offsetIsTop\r\n        && (elOffset.top - this.offsetValue) <= scrollTop\r\n    )\r\n    || (\r\n      !this.offsetIsTop\r\n      && (\r\n        elOffset.top + this.offsetBottom + offsetHeight) > (scrollTop + windowHeight\r\n      )\r\n    );\r\n    const sticky: boolean = !this.disabled && isStatic;\r\n    const position = sticky ? `position: ${this.position}; zIndex: ${this.index};` : '';\r\n    const offset: string = sticky ? `${this.offsetType}: ${this.offsetValue}px; width: ${offsetWidth}px` : '';\r\n    this.affixStyle = `${position}${offset}`;\r\n\r\n    const changeEmit: ChangeEntity = {\r\n      affixStatus: sticky,\r\n      scrollStatus: isStatic,\r\n    };\r\n\r\n    this.change(changeEmit);\r\n\r\n    return changeEmit;\r\n  }\r\n}\r\n</script>\r\n"]}]}