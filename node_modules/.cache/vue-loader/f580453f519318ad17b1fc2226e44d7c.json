{"remainingRequest":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangyufan/em/testPro/vue-scale/src/components/progress/Progress.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/zhangyufan/em/testPro/vue-scale/src/components/progress/Progress.vue","mtime":1573474128000},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/babel-loader/lib/index.js","mtime":1574242632071},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/ts-loader/index.js","mtime":1574332289889},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js","mtime":1574242648574}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport {\r\n  Component,\r\n  Model,\r\n  Prop,\r\n  Watch,\r\n  Vue,\r\n} from 'vue-property-decorator';\r\nimport WProgressLine from '@/components/progress/ProgressLine.vue';\r\nimport WProgressCircle from '@/components/progress/ProgressCircle.vue';\r\nimport WProgressText from '@/components/progress/ProgressText.vue';\r\nimport {\r\n  ColorItemEntity,\r\n} from '@/components/progress/helper';\r\n\r\n@Component({\r\n  components: {\r\n    WProgressLine,\r\n    WProgressCircle,\r\n    WProgressText,\r\n  },\r\n})\r\nexport default class WProgress extends Vue {\r\n  name: string = 'Progress';\r\n\r\n  percentValue: number = 0;\r\n\r\n  lineWidth: number = 0;\r\n\r\n  @Model('model', { type: Number }) readonly value!: number;\r\n\r\n  @Prop({\r\n    type: Number,\r\n    default: 8,\r\n  }) private strokeWidth!: number;\r\n\r\n  @Prop({\r\n    type: Number,\r\n    default: 126,\r\n  }) private width!: number;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: 'line', // circle, dashbroad\r\n  }) private type!: string;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: 'round', // square\r\n  }) private strokeLinecap!: string;\r\n\r\n  @Prop(String) private status!: string; // success, error, normal,\r\n\r\n  @Prop([String, Array, Function]) private color!: string | ColorItemEntity[] | Function;\r\n\r\n  @Prop(Function) private format!: Function;\r\n\r\n  @Prop({\r\n    type: Boolean,\r\n    default: true,\r\n  }) private showInfo!: boolean;\r\n\r\n  @Prop(Boolean) private inside!: boolean;\r\n\r\n  get noLine(): boolean {\r\n    return this.type !== 'line';\r\n  }\r\n\r\n  created() {\r\n    this.initLineWidth();\r\n  }\r\n\r\n  initLineWidth() {\r\n    this.lineWidth = this.strokeWidth;\r\n  }\r\n\r\n  @Watch('value', {\r\n    immediate: true,\r\n  })\r\n  getValue() {\r\n    this.percentValue = this.value > 100 ? 100 : this.value;\r\n  }\r\n}\r\n",{"version":3,"sources":["Progress.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Progress.vue","sourceRoot":"src/components/progress","sourcesContent":["<template>\r\n  <div\r\n    class=\"w-progress\"\r\n    :class=\"{\r\n      'w-progress-circle': noLine,\r\n    }\"\r\n  >\r\n    <WProgressLine\r\n      v-model=\"percentValue\"\r\n      :strokeWidth=\"lineWidth\"\r\n      :strokeLinecap=\"strokeLinecap\"\r\n      :status=\"status\"\r\n      :color=\"color\"\r\n      :format=\"format\"\r\n      :inside=\"inside\"\r\n      v-if=\"type === 'line'\"\r\n      :showInfo=\"showInfo\"\r\n    />\r\n    <WProgressCircle\r\n      v-model=\"percentValue\"\r\n      :strokeWidth=\"lineWidth\"\r\n      :strokeLinecap=\"strokeLinecap\"\r\n      :status=\"status\"\r\n      :color=\"color\"\r\n      :format=\"format\"\r\n      :type=\"type\"\r\n      :width=\"width\"\r\n      v-else\r\n    />\r\n    <WProgressText\r\n      v-model=\"percentValue\"\r\n      :format=\"format\"\r\n      :strokeWidth=\"lineWidth\"\r\n      :type=\"type\"\r\n      :status=\"status\"\r\n      :inside=\"inside\"\r\n      v-if=\"showInfo && !inside\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Model,\r\n  Prop,\r\n  Watch,\r\n  Vue,\r\n} from 'vue-property-decorator';\r\nimport WProgressLine from '@/components/progress/ProgressLine.vue';\r\nimport WProgressCircle from '@/components/progress/ProgressCircle.vue';\r\nimport WProgressText from '@/components/progress/ProgressText.vue';\r\nimport {\r\n  ColorItemEntity,\r\n} from '@/components/progress/helper';\r\n\r\n@Component({\r\n  components: {\r\n    WProgressLine,\r\n    WProgressCircle,\r\n    WProgressText,\r\n  },\r\n})\r\nexport default class WProgress extends Vue {\r\n  name: string = 'Progress';\r\n\r\n  percentValue: number = 0;\r\n\r\n  lineWidth: number = 0;\r\n\r\n  @Model('model', { type: Number }) readonly value!: number;\r\n\r\n  @Prop({\r\n    type: Number,\r\n    default: 8,\r\n  }) private strokeWidth!: number;\r\n\r\n  @Prop({\r\n    type: Number,\r\n    default: 126,\r\n  }) private width!: number;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: 'line', // circle, dashbroad\r\n  }) private type!: string;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: 'round', // square\r\n  }) private strokeLinecap!: string;\r\n\r\n  @Prop(String) private status!: string; // success, error, normal,\r\n\r\n  @Prop([String, Array, Function]) private color!: string | ColorItemEntity[] | Function;\r\n\r\n  @Prop(Function) private format!: Function;\r\n\r\n  @Prop({\r\n    type: Boolean,\r\n    default: true,\r\n  }) private showInfo!: boolean;\r\n\r\n  @Prop(Boolean) private inside!: boolean;\r\n\r\n  get noLine(): boolean {\r\n    return this.type !== 'line';\r\n  }\r\n\r\n  created() {\r\n    this.initLineWidth();\r\n  }\r\n\r\n  initLineWidth() {\r\n    this.lineWidth = this.strokeWidth;\r\n  }\r\n\r\n  @Watch('value', {\r\n    immediate: true,\r\n  })\r\n  getValue() {\r\n    this.percentValue = this.value > 100 ? 100 : this.value;\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  @import './progress.scss';\r\n</style>\r\n"]}]}