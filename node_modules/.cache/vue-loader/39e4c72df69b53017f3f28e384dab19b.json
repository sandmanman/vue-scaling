{"remainingRequest":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangyufan/em/testPro/vue-scale/src/components/progress/ProgressLine.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/zhangyufan/em/testPro/vue-scale/src/components/progress/ProgressLine.vue","mtime":1573474128000},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/babel-loader/lib/index.js","mtime":1574242632071},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/ts-loader/index.js","mtime":1574332289889},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js","mtime":1574242648574}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport {\r\n  Component,\r\n  Model,\r\n  Prop,\r\n  Vue,\r\n} from 'vue-property-decorator';\r\nimport WIcon from '@/components/icon/Icon.vue';\r\nimport WProgressText from '@/components/progress/ProgressText.vue';\r\nimport {\r\n  statusList,\r\n  ColorItemEntity,\r\n  getColorInArray,\r\n} from '@/components/progress/helper';\r\nimport { isString, isArray, isFunction } from '@/helper/type';\r\n\r\n@Component({\r\n  components: {\r\n    WIcon,\r\n    WProgressText,\r\n  },\r\n})\r\nexport default class WProgressLine extends Vue {\r\n  name: string = 'ProgressLine';\r\n\r\n  @Model('model', { type: Number }) readonly value!: number;\r\n\r\n  @Prop(Number) private strokeWidth!: number;\r\n\r\n  @Prop(String) private strokeLinecap!: string;\r\n\r\n  @Prop([String, Array, Function]) private color!: string | ColorItemEntity[] | Function;\r\n\r\n  @Prop(String) private status!: string;\r\n\r\n  @Prop(Function) private format!: Function;\r\n\r\n  @Prop(Boolean) private showInfo!: boolean;\r\n\r\n  @Prop(Boolean) private inside!: boolean;\r\n\r\n  get isProgress() {\r\n    return this.value < 100;\r\n  }\r\n\r\n  get fontStyle() {\r\n    return {\r\n      height: `${this.strokeWidth}px`,\r\n      'line-height': `${this.strokeWidth}px`,\r\n    };\r\n  }\r\n\r\n  get lineStyle() {\r\n    let newColor: string = '';\r\n\r\n    if (isString(this.color)) {\r\n      newColor = (this.color as string);\r\n    } else if (isArray(this.color)) {\r\n      newColor = getColorInArray((this.color as []), this.value);\r\n    } else if (isFunction(this.color)) {\r\n      newColor = (this.color as Function)(this.value);\r\n    }\r\n\r\n    return {\r\n      'background-color': newColor,\r\n    };\r\n  }\r\n\r\n  get radiusStyle() {\r\n    return {\r\n      'border-radius': this.strokeLinecap === 'round' ? `${this.strokeWidth / 2}px` : 0,\r\n    };\r\n  }\r\n\r\n  get hasStatus(): boolean {\r\n    return !!this.status && statusList.some((statusItem: string) => statusItem === this.status);\r\n  }\r\n}\r\n",{"version":3,"sources":["ProgressLine.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ProgressLine.vue","sourceRoot":"src/components/progress","sourcesContent":["<template>\r\n  <div\r\n    class=\"w-progress-line\"\r\n    :class=\"{\r\n    }\"\r\n  >\r\n    <div\r\n      class=\"w-progress-line-bar\"\r\n      :style=\"fontStyle\"\r\n    >\r\n      <div\r\n        class=\"w-progress-line-outer\"\r\n        :style=\"radiusStyle\"\r\n      >\r\n        <div\r\n          class=\"w-progress-line-inner\"\r\n          :class=\"{\r\n            [`w-progress-line-${status}`]: hasStatus,\r\n          }\"\r\n          :style=\"[{\r\n            width: `${this.value}%`,\r\n          }, radiusStyle, lineStyle]\"\r\n        >\r\n          <WProgressText\r\n            v-model=\"value\"\r\n            :format=\"format\"\r\n            :strokeWidth=\"strokeWidth\"\r\n            type=\"line\"\r\n            :status=\"status\"\r\n            :inside=\"true\"\r\n            v-if=\"showInfo && inside\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Model,\r\n  Prop,\r\n  Vue,\r\n} from 'vue-property-decorator';\r\nimport WIcon from '@/components/icon/Icon.vue';\r\nimport WProgressText from '@/components/progress/ProgressText.vue';\r\nimport {\r\n  statusList,\r\n  ColorItemEntity,\r\n  getColorInArray,\r\n} from '@/components/progress/helper';\r\nimport { isString, isArray, isFunction } from '@/helper/type';\r\n\r\n@Component({\r\n  components: {\r\n    WIcon,\r\n    WProgressText,\r\n  },\r\n})\r\nexport default class WProgressLine extends Vue {\r\n  name: string = 'ProgressLine';\r\n\r\n  @Model('model', { type: Number }) readonly value!: number;\r\n\r\n  @Prop(Number) private strokeWidth!: number;\r\n\r\n  @Prop(String) private strokeLinecap!: string;\r\n\r\n  @Prop([String, Array, Function]) private color!: string | ColorItemEntity[] | Function;\r\n\r\n  @Prop(String) private status!: string;\r\n\r\n  @Prop(Function) private format!: Function;\r\n\r\n  @Prop(Boolean) private showInfo!: boolean;\r\n\r\n  @Prop(Boolean) private inside!: boolean;\r\n\r\n  get isProgress() {\r\n    return this.value < 100;\r\n  }\r\n\r\n  get fontStyle() {\r\n    return {\r\n      height: `${this.strokeWidth}px`,\r\n      'line-height': `${this.strokeWidth}px`,\r\n    };\r\n  }\r\n\r\n  get lineStyle() {\r\n    let newColor: string = '';\r\n\r\n    if (isString(this.color)) {\r\n      newColor = (this.color as string);\r\n    } else if (isArray(this.color)) {\r\n      newColor = getColorInArray((this.color as []), this.value);\r\n    } else if (isFunction(this.color)) {\r\n      newColor = (this.color as Function)(this.value);\r\n    }\r\n\r\n    return {\r\n      'background-color': newColor,\r\n    };\r\n  }\r\n\r\n  get radiusStyle() {\r\n    return {\r\n      'border-radius': this.strokeLinecap === 'round' ? `${this.strokeWidth / 2}px` : 0,\r\n    };\r\n  }\r\n\r\n  get hasStatus(): boolean {\r\n    return !!this.status && statusList.some((statusItem: string) => statusItem === this.status);\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  @import './progress.scss';\r\n</style>\r\n"]}]}