{"remainingRequest":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangyufan/em/testPro/vue-scale/src/views/components/VueScale.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/zhangyufan/em/testPro/vue-scale/src/views/components/VueScale.vue","mtime":1574740243034},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/css-loader/index.js","mtime":1573721989187},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1574242648574},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/postcss-loader/src/index.js","mtime":1573721998387},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/sass-loader/lib/loader.js","mtime":1574242652692},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js","mtime":1574242648574}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.vue-scale {\n  background: #999;\n  // overflow: hidden;\n\n  .box {\n    width: 100%;\n    height: 100%;\n    position: relative;\n    top: 0;\n    left: 0;\n    // transform-origin: center center;\n  }\n}\n",{"version":3,"sources":["VueScale.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VueScale.vue","sourceRoot":"src/views/components","sourcesContent":["<!--  -->\n<template>\n  <div class=\"vue-scale\" ref=\"vueScaleRef\" :style=\"{height: `${height}px`, width: `${width}px`}\">\n    <!-- eslint-disable max-len -->\n    <v-touch\n      class=\"box\"\n      @panmove=\"onPan\"\n      @panstart=\"onPanStart\"\n      @pinchmove=\"onPinch\"\n      @pinchstart=\"onPinchStart\"\n      @doubletap=\"onDoubleTap\"\n      :pinch-options=\"{ threshold: 0.09 }\" :pan-options=\"{ threshold: 0.01 }\"\n      :style=\"{transform: `matrix(${this.tMatrix.join(',')})`, transition: this.duration ? '.3s ease all' : ''}\">\n      <!--此插槽可以缩放,拖动-->\n      <slot></slot>\n    </v-touch>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  Component,\n  Prop,\n  Emit,\n  Vue,\n} from 'vue-property-decorator';\n\ninterface point2D {\n  x: number,\n  y: number,\n}\n\n@Component\nexport default class vueScale extends Vue {\n  @Prop({ type: Number, default: 100 }) private height!: number;\n\n  @Prop({ type: Number, default: 100 }) private width!: number;\n\n  // @Prop({ type: Number, default: 0 }) private top!: number;\n\n  @Prop({ type: Number, default: 1.5 }) private maxScale!: number;\n\n  e: any = null;\n\n  tMatrix: Array<number> = [1, 0, 0, 1, 0, 0]; // x缩放，无，无，y缩放，x平移，y平移\n\n  initScale: number = 1; // 初始化scale\n\n  poscenter: point2D = this.point2D(0, 0); // 缓存双指的中心坐标\n\n  duration: boolean = false; // 设置过渡效果，用于双击缩放效果\n\n  lastTranslate: point2D = this.point2D(0, 0); // 记录上次的偏移值\n\n  lastcenter: point2D = this.point2D(this.width / 2, this.height / 2); // 图像的中心点，用于对比双指中心点\n\n  center: point2D = this.point2D(this.width / 2, this.height / 2);\n\n  nowScale: number = 1; // 缩放scale\n\n  top: number = 0; // 距离顶部\n\n  left: number = 0; // 距离左边\n\n  mounted() {\n    this.top = this.$refs.vueScaleRef.getBoundingClientRect().top;\n    this.left = this.$refs.vueScaleRef.getBoundingClientRect().left;\n    console.log('距离左边，顶部', this.left, this.top);\n  }\n\n  onPan(ev: any) {\n    this.duration = false;\n    const cloneTMatrix = [...this.tMatrix];\n    cloneTMatrix[4] = this.lastTranslate.x + ev.deltaX;\n    cloneTMatrix[5] = this.lastTranslate.y + ev.deltaY;\n    this.tMatrix = cloneTMatrix;\n    // this.$emit('moveChange', { x: ev.center.x, y: ev.center.y - 150 });\n    this.moveChange({ x: ev.center.x - this.left, y: ev.center.y - this.top });\n  }\n\n  onPanStart() {\n    this.lastTranslate = this.point2D(this.tMatrix[4], this.tMatrix[5]); // 缓存上一次的偏移值\n  }\n\n  onPinch(ev) {\n    console.log(ev);\n    this.duration = false;\n    const cloneTMatrix = [...this.tMatrix];\n    cloneTMatrix[4] = this.lastTranslate.x + ev.deltaX;\n    cloneTMatrix[5] = this.lastTranslate.y + ev.deltaY;\n    this.tMatrix = cloneTMatrix;\n    this.moveChange({ x: ev.center.x - this.left, y: ev.center.y - this.top });\n  }\n\n  @Emit('moveChange')\n  // eslint-disable-next-line\n  moveChange(point2DObj) {\n    return point2DObj;\n  }\n\n  // 缩放开始\n  onPinchStart(ev) {\n    this.duration = false;\n    this.lastTranslate = this.point2D(this.tMatrix[4], this.tMatrix[5]);//记录上一次的偏移值\n    this.initScale = this.tMatrix[0] || 1;\n    this.poscenter = this.point2D(ev.center.x - this.left, ev.center.y - this.top);\n\n    //重新计算放大后的中心坐标\n    // eslint-disable-next-line\n    this.lastcenter = this.point2D(this.center.x + this.lastTranslate.x, this.center.y + this.lastTranslate.y);\n    // eslint-disable-next-line\n    this.poscenter = this.point2D(ev.center.x - this.lastcenter.x - this.left, ev.center.y - this.top - this.lastcenter.y);\n  }\n\n  onDoubleTap(ev) {\n    console.log(ev);\n    this.duration = true;\n    [this.nowScale] = this.tMatrix;\n    const cloneTMatrix = [...this.tMatrix];\n    if (this.nowScale !== 1 || this.tMatrix[4] !== 0) {\n      //scale不等于1，要重回1\n      cloneTMatrix[0] = 1;\n      cloneTMatrix[3] = 1;\n      cloneTMatrix[4] = 0;\n      cloneTMatrix[5] = 0;\n      // this.$emit('scaleChange', 1, this.poscenter);\n      this.scaleChange(1, this.poscenter);\n    } else {\n      const pointer = ev.center;\n      const scale = this.maxScale;\n      cloneTMatrix[0] = scale;\n      cloneTMatrix[3] = scale;\n      cloneTMatrix[4] = (1 - scale) * (pointer.x - this.center.x - this.left);\n      cloneTMatrix[5] = (1 - scale) * (pointer.y - this.top - this.center.y);\n      // this.$emit('scaleChange', scale, { x: pointer.x, y: pointer.y - this.top });\n      this.scaleChange(scale, { x: pointer.x - this.left, y: pointer.y - this.top });\n    }\n    this.tMatrix = cloneTMatrix;\n  }\n\n  // 回到初始状态\n  backState() {\n    const cloneTMatrix = [...this.tMatrix];\n    this.duration = true;\n    cloneTMatrix[0] = 1;\n    cloneTMatrix[3] = 1;\n    cloneTMatrix[4] = 0;\n    cloneTMatrix[5] = 0;\n    this.tMatrix = cloneTMatrix;\n    this.scaleChange(1);\n  }\n\n  @Emit('scaleChange')\n  // eslint-disable-next-line\n  scaleChange(scale: number, point = {}): object {\n    return { scale, point };\n  }\n\n  // eslint-disable-next-line\n  point2D(x: number, y: number): point2D {\n    console.log(this);\n    return { x, y };\n  }\n}\n</script>\n<style lang='scss'>\n.vue-scale {\n  background: #999;\n  // overflow: hidden;\n\n  .box {\n    width: 100%;\n    height: 100%;\n    position: relative;\n    top: 0;\n    left: 0;\n    // transform-origin: center center;\n  }\n}\n</style>\n"]}]}