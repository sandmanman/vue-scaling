{"remainingRequest":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangyufan/em/testPro/vue-scale/src/components/cascader/CascaderPanel.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/zhangyufan/em/testPro/vue-scale/src/components/cascader/CascaderPanel.vue","mtime":1573474128000},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/babel-loader/lib/index.js","mtime":1574242632071},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/ts-loader/index.js","mtime":1574332289889},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js","mtime":1574242648574}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport {\r\n  Component,\r\n  Model,\r\n  Prop,\r\n  Watch,\r\n  Vue,\r\n} from 'vue-property-decorator';\r\nimport docClick from '@/directives/doclick';\r\nimport { noop, noopArray } from '@/helper/noop';\r\nimport { hasOwn } from '@/helper/o';\r\nimport WOption from '../select/Option.vue';\r\nimport {\r\n  OptionsEntity,\r\n  FieldNamesEntity,\r\n  ReturnParamsEntity,\r\n  fieldNamesDefault,\r\n} from './entity';\r\nimport { getChildOptions, getCascaderOptions } from './helper';\r\n\r\nVue.directive('doc-click', (docClick as any));\r\n\r\ninterface MenuItemEntity {\r\n  index: number;\r\n  options: any[];\r\n}\r\n\r\n@Component({\r\n  components: {\r\n    WOption,\r\n  },\r\n})\r\nexport default class CascaderPanel extends Vue {\r\n  optionMenu: MenuItemEntity[] = [];\r\n\r\n  currentOption: any = {};\r\n\r\n  floor: number = 0;\r\n\r\n  @Model('model', { type: Array }) readonly value!: string[];\r\n\r\n  @Prop({\r\n    type: Array,\r\n    default: noopArray,\r\n  }) private oldValue!: string[];\r\n\r\n  @Prop({\r\n    type: Array,\r\n    default: noop,\r\n  }) private option!: any[];\r\n\r\n  @Prop({\r\n    type: Object,\r\n    default: (): FieldNamesEntity => fieldNamesDefault,\r\n  }) private fieldNames!: FieldNamesEntity;\r\n\r\n  mounted() {\r\n    getCascaderOptions({\r\n      origin: this.optionMenu,\r\n      fieldNames: this.fieldNames,\r\n      value: this.value,\r\n      options: this.option,\r\n    });\r\n  }\r\n\r\n  handleOptionChange(menuIndex: number, itemIndex: any, current: ReturnParamsEntity) {\r\n    if (\r\n      !hasOwn(current, this.fieldNames.disabled)\r\n      || (\r\n        hasOwn(current, this.fieldNames.disabled)\r\n          && !current[this.fieldNames.disabled]\r\n      )\r\n    ) {\r\n      this.optChange(current[this.fieldNames.label], current.ev, false, menuIndex, itemIndex);\r\n    } else {\r\n      current.ev!.stopPropagation();\r\n    }\r\n  }\r\n\r\n  optChange(\r\n    current: string,\r\n    ev: MouseEvent | undefined,\r\n    emit: boolean,\r\n    menuIndex: number,\r\n    itemIndex: number,\r\n  ) {\r\n    if (current) {\r\n      const { children, label } = this.fieldNames;\r\n      const newOption = this.optionMenu[menuIndex].options.find(\r\n        (optItem: any) => optItem[label] === current,\r\n      );\r\n\r\n      // 如果当前禁用\r\n      if (newOption\r\n        && hasOwn(newOption, 'disabled')\r\n        && newOption.disabled\r\n        && ev) {\r\n        ev.stopPropagation();\r\n        return;\r\n      }\r\n\r\n      this.floor = menuIndex;\r\n      // 更新选中高亮索引\r\n      this.optionMenu.splice(menuIndex, 1, {\r\n        index: itemIndex,\r\n        options: this.optionMenu[menuIndex].options,\r\n      });\r\n\r\n      const hasChild = newOption && hasOwn(newOption, children) && newOption[children].length > 0;\r\n\r\n      this.setValue(current, !!ev);\r\n\r\n      if (!emit) {\r\n        this.currentOption = {\r\n          value: this.value,\r\n          current,\r\n          item: newOption,\r\n          index: itemIndex,\r\n          floor: this.floor,\r\n          [children]: hasChild ? newOption[children].slice() : [],\r\n        };\r\n        this.$emit('panelChange', this.currentOption, ev);\r\n      }\r\n\r\n      if (!hasChild) {\r\n        this.optionMenu.length = menuIndex + 1;\r\n      }\r\n      // 如果是最后一个就关上下拉 or 当前不可选\r\n      if (hasChild && ev) {\r\n        getChildOptions({\r\n          item: newOption[this.fieldNames.children],\r\n          origin: this.optionMenu,\r\n          index: menuIndex,\r\n        });\r\n\r\n        ev.stopPropagation();\r\n      }\r\n    }\r\n  }\r\n\r\n  // 运用数组的引用来做\r\n  // resetValue {Boolean} true 是否当前索引( this.floor )之后的数据\r\n  setValue(current: string, resetValue: boolean) {\r\n    this.value.splice(this.floor, 1, current);\r\n    // 如果重选了，就清除之后的\r\n    while (this.value.length - 1 > this.floor && resetValue) {\r\n      this.value.pop();\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.optionMenu = this.optionMenu.map((menuItem: any) => {\r\n      menuItem.index = -1;\r\n      return menuItem;\r\n    });\r\n    this.optionMenu.length = 1;\r\n    this.floor = 0;\r\n  }\r\n\r\n  updataOptions() {\r\n    this.optionMenu = [];\r\n    getCascaderOptions({\r\n      origin: this.optionMenu,\r\n      fieldNames: this.fieldNames,\r\n      value: this.value,\r\n      options: this.option,\r\n    });\r\n  }\r\n\r\n  @Watch('option')\r\n  watchOption() {\r\n    this.reset();\r\n    this.updataOptions();\r\n  }\r\n\r\n  @Watch('value')\r\n  watchValue(newValue: string[], oldValue: string[]) {\r\n    // 如果有三条数据，选一个就关上，就恢复下拉\r\n    if (newValue.toString() !== oldValue.toString()) {\r\n      this.updataOptions();\r\n    }\r\n    // 如果点击删除\r\n    if (!newValue.length) {\r\n      this.reset();\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["CascaderPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CascaderPanel.vue","sourceRoot":"src/components/cascader","sourcesContent":["<template>\r\n  <div style=\"display: inline-block\">\r\n    <template\r\n      v-for=\"(optItem, optItemIndex) in optionMenu\"\r\n    >\r\n      <ul class=\"w-cascader-list\" :key=\"optItemIndex\">\r\n        <w-option\r\n          mode=\"cascader\"\r\n          :active=\"optItem.index === optOneIndex\"\r\n          :class=\"{\r\n            ['w-cascader-last']:\r\n              !optOne[fieldNames.children]\r\n              || optOne[fieldNames.children].length < 1,\r\n            ['w-cascader-loading']: optOne[fieldNames.loading],\r\n          }\"\r\n          :key=\"`${optOne[fieldNames.value]}_${floor}_${optOneIndex}`\"\r\n          v-for=\"(optOne, optOneIndex) in optItem.options\"\r\n          :optionChange=\"handleOptionChange.bind(this, optItemIndex, optOneIndex)\"\r\n          :disabled=\"optOne.disabled || false\"\r\n          :value=\"optOne[fieldNames.value]\"\r\n          :label=\"optOne[fieldNames.label]\"\r\n          :loading=\"optOne[fieldNames.loading]\"\r\n          :fieldNames=\"fieldNames\"\r\n        >{{optOne[fieldNames.value]}}</w-option>\r\n      </ul>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Model,\r\n  Prop,\r\n  Watch,\r\n  Vue,\r\n} from 'vue-property-decorator';\r\nimport docClick from '@/directives/doclick';\r\nimport { noop, noopArray } from '@/helper/noop';\r\nimport { hasOwn } from '@/helper/o';\r\nimport WOption from '../select/Option.vue';\r\nimport {\r\n  OptionsEntity,\r\n  FieldNamesEntity,\r\n  ReturnParamsEntity,\r\n  fieldNamesDefault,\r\n} from './entity';\r\nimport { getChildOptions, getCascaderOptions } from './helper';\r\n\r\nVue.directive('doc-click', (docClick as any));\r\n\r\ninterface MenuItemEntity {\r\n  index: number;\r\n  options: any[];\r\n}\r\n\r\n@Component({\r\n  components: {\r\n    WOption,\r\n  },\r\n})\r\nexport default class CascaderPanel extends Vue {\r\n  optionMenu: MenuItemEntity[] = [];\r\n\r\n  currentOption: any = {};\r\n\r\n  floor: number = 0;\r\n\r\n  @Model('model', { type: Array }) readonly value!: string[];\r\n\r\n  @Prop({\r\n    type: Array,\r\n    default: noopArray,\r\n  }) private oldValue!: string[];\r\n\r\n  @Prop({\r\n    type: Array,\r\n    default: noop,\r\n  }) private option!: any[];\r\n\r\n  @Prop({\r\n    type: Object,\r\n    default: (): FieldNamesEntity => fieldNamesDefault,\r\n  }) private fieldNames!: FieldNamesEntity;\r\n\r\n  mounted() {\r\n    getCascaderOptions({\r\n      origin: this.optionMenu,\r\n      fieldNames: this.fieldNames,\r\n      value: this.value,\r\n      options: this.option,\r\n    });\r\n  }\r\n\r\n  handleOptionChange(menuIndex: number, itemIndex: any, current: ReturnParamsEntity) {\r\n    if (\r\n      !hasOwn(current, this.fieldNames.disabled)\r\n      || (\r\n        hasOwn(current, this.fieldNames.disabled)\r\n          && !current[this.fieldNames.disabled]\r\n      )\r\n    ) {\r\n      this.optChange(current[this.fieldNames.label], current.ev, false, menuIndex, itemIndex);\r\n    } else {\r\n      current.ev!.stopPropagation();\r\n    }\r\n  }\r\n\r\n  optChange(\r\n    current: string,\r\n    ev: MouseEvent | undefined,\r\n    emit: boolean,\r\n    menuIndex: number,\r\n    itemIndex: number,\r\n  ) {\r\n    if (current) {\r\n      const { children, label } = this.fieldNames;\r\n      const newOption = this.optionMenu[menuIndex].options.find(\r\n        (optItem: any) => optItem[label] === current,\r\n      );\r\n\r\n      // 如果当前禁用\r\n      if (newOption\r\n        && hasOwn(newOption, 'disabled')\r\n        && newOption.disabled\r\n        && ev) {\r\n        ev.stopPropagation();\r\n        return;\r\n      }\r\n\r\n      this.floor = menuIndex;\r\n      // 更新选中高亮索引\r\n      this.optionMenu.splice(menuIndex, 1, {\r\n        index: itemIndex,\r\n        options: this.optionMenu[menuIndex].options,\r\n      });\r\n\r\n      const hasChild = newOption && hasOwn(newOption, children) && newOption[children].length > 0;\r\n\r\n      this.setValue(current, !!ev);\r\n\r\n      if (!emit) {\r\n        this.currentOption = {\r\n          value: this.value,\r\n          current,\r\n          item: newOption,\r\n          index: itemIndex,\r\n          floor: this.floor,\r\n          [children]: hasChild ? newOption[children].slice() : [],\r\n        };\r\n        this.$emit('panelChange', this.currentOption, ev);\r\n      }\r\n\r\n      if (!hasChild) {\r\n        this.optionMenu.length = menuIndex + 1;\r\n      }\r\n      // 如果是最后一个就关上下拉 or 当前不可选\r\n      if (hasChild && ev) {\r\n        getChildOptions({\r\n          item: newOption[this.fieldNames.children],\r\n          origin: this.optionMenu,\r\n          index: menuIndex,\r\n        });\r\n\r\n        ev.stopPropagation();\r\n      }\r\n    }\r\n  }\r\n\r\n  // 运用数组的引用来做\r\n  // resetValue {Boolean} true 是否当前索引( this.floor )之后的数据\r\n  setValue(current: string, resetValue: boolean) {\r\n    this.value.splice(this.floor, 1, current);\r\n    // 如果重选了，就清除之后的\r\n    while (this.value.length - 1 > this.floor && resetValue) {\r\n      this.value.pop();\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.optionMenu = this.optionMenu.map((menuItem: any) => {\r\n      menuItem.index = -1;\r\n      return menuItem;\r\n    });\r\n    this.optionMenu.length = 1;\r\n    this.floor = 0;\r\n  }\r\n\r\n  updataOptions() {\r\n    this.optionMenu = [];\r\n    getCascaderOptions({\r\n      origin: this.optionMenu,\r\n      fieldNames: this.fieldNames,\r\n      value: this.value,\r\n      options: this.option,\r\n    });\r\n  }\r\n\r\n  @Watch('option')\r\n  watchOption() {\r\n    this.reset();\r\n    this.updataOptions();\r\n  }\r\n\r\n  @Watch('value')\r\n  watchValue(newValue: string[], oldValue: string[]) {\r\n    // 如果有三条数据，选一个就关上，就恢复下拉\r\n    if (newValue.toString() !== oldValue.toString()) {\r\n      this.updataOptions();\r\n    }\r\n    // 如果点击删除\r\n    if (!newValue.length) {\r\n      this.reset();\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}