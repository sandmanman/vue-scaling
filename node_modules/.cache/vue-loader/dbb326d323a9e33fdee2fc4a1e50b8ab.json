{"remainingRequest":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangyufan/em/testPro/vue-scale/src/components/vueScale/vueScale.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/zhangyufan/em/testPro/vue-scale/src/components/vueScale/vueScale.vue","mtime":1574935343949},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/css-loader/index.js","mtime":1573721989187},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1574242648574},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/postcss-loader/src/index.js","mtime":1573721998387},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/sass-loader/lib/loader.js","mtime":1574242652692},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js","mtime":1574242648574}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.vue-scale {\r\n  background: #999;\r\n  // overflow: hidden;\r\n\r\n  .box {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    top: 0;\r\n    left: 0;\r\n    // transform-origin: center center;\r\n  }\r\n}\r\n",{"version":3,"sources":["vueScale.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"vueScale.vue","sourceRoot":"src/components/vueScale","sourcesContent":["<!--  -->\r\n<template>\r\n  <div class=\"vue-scale\" ref=\"vueScaleRef\" :style=\"{height: `${height}px`, width: `${width}px`}\">\r\n    <!-- eslint-disable max-len -->\r\n    <v-touch\r\n      class=\"box\"\r\n      @panmove=\"onPan\"\r\n      @panstart=\"onPanStart\"\r\n      @pinchmove=\"onPinch\"\r\n      @pinchstart=\"onPinchStart\"\r\n      @doubletap=\"onDoubleTap\"\r\n      :pinch-options=\"{ threshold: 0.09 }\" :pan-options=\"{ threshold: 0.01 }\"\r\n      :style=\"{transform: `matrix(${this.tMatrix.join(',')})`, transition: this.duration ? '.3s ease all' : ''}\">\r\n      <!--此插槽可以缩放,拖动-->\r\n      <slot></slot>\r\n    </v-touch>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Prop,\r\n  Emit,\r\n  Vue,\r\n} from 'vue-property-decorator';\r\n\r\ninterface point2D {\r\n  x: number,\r\n  y: number,\r\n}\r\n\r\n@Component\r\nexport default class vueScale extends Vue {\r\n  @Prop({ type: Number, default: 100 }) private height!: number;\r\n\r\n  @Prop({ type: Number, default: 100 }) private width!: number;\r\n\r\n  @Prop({ type: Number, default: 1.5 }) private maxScale!: number;\r\n\r\n  e: any = null;\r\n\r\n  tMatrix: Array<number> = [1, 0, 0, 1, 0, 0]; // x缩放，无，无，y缩放，x平移，y平移\r\n\r\n  initScale: number = 1; // 初始化scale\r\n\r\n  poscenter: point2D = this.point2D(0, 0); // 缓存双指的中心坐标\r\n\r\n  duration: boolean = false; // 设置过渡效果，用于双击缩放效果\r\n\r\n  lastTranslate: point2D = this.point2D(0, 0); // 记录上次的偏移值\r\n\r\n  lastcenter: point2D = this.point2D(this.width / 2, this.height / 2); // 图像的中心点，用于对比双指中心点\r\n\r\n  center: point2D = this.point2D(this.width / 2, this.height / 2);\r\n\r\n  nowScale: number = 1; // 缩放scale\r\n\r\n  top: number = 0; // 距离顶部\r\n\r\n  left: number = 0; // 距离左边\r\n\r\n  mounted() {\r\n    this.top = (this.$refs.vueScaleRef as Element).getBoundingClientRect().top;\r\n    this.left = (this.$refs.vueScaleRef as Element).getBoundingClientRect().left;\r\n    console.log('距离左边，顶部', this.left, this.top);\r\n  }\r\n\r\n  onPan(ev: any) {\r\n    this.duration = false;\r\n    const cloneTMatrix = [...this.tMatrix];\r\n    cloneTMatrix[4] = this.lastTranslate.x + ev.deltaX;\r\n    cloneTMatrix[5] = this.lastTranslate.y + ev.deltaY;\r\n    this.tMatrix = cloneTMatrix;\r\n    // this.$emit('moveChange', { x: ev.center.x, y: ev.center.y - 150 });\r\n    this.moveChange({ x: ev.center.x - this.left, y: ev.center.y - this.top });\r\n  }\r\n\r\n  onPanStart() {\r\n    this.lastTranslate = this.point2D(this.tMatrix[4], this.tMatrix[5]); // 缓存上一次的偏移值\r\n  }\r\n\r\n  onPinch(ev) {\r\n    console.log(ev);\r\n    this.duration = false;\r\n    const cloneTMatrix = [...this.tMatrix];\r\n    cloneTMatrix[4] = this.lastTranslate.x + ev.deltaX;\r\n    cloneTMatrix[5] = this.lastTranslate.y + ev.deltaY;\r\n    this.tMatrix = cloneTMatrix;\r\n    this.moveChange({ x: ev.center.x - this.left, y: ev.center.y - this.top });\r\n  }\r\n\r\n  @Emit('moveChange')\r\n  // eslint-disable-next-line\r\n  moveChange(point2DObj) {\r\n    return point2DObj;\r\n  }\r\n\r\n  // 缩放开始\r\n  onPinchStart(ev) {\r\n    this.duration = false;\r\n    this.lastTranslate = this.point2D(this.tMatrix[4], this.tMatrix[5]);//记录上一次的偏移值\r\n    this.initScale = this.tMatrix[0] || 1;\r\n    this.poscenter = this.point2D(ev.center.x - this.left, ev.center.y - this.top);\r\n\r\n    //重新计算放大后的中心坐标\r\n    // eslint-disable-next-line\r\n    this.lastcenter = this.point2D(this.center.x + this.lastTranslate.x, this.center.y + this.lastTranslate.y);\r\n    // eslint-disable-next-line\r\n    this.poscenter = this.point2D(ev.center.x - this.lastcenter.x - this.left, ev.center.y - this.top - this.lastcenter.y);\r\n  }\r\n\r\n  onDoubleTap(ev) {\r\n    console.log(ev);\r\n    this.duration = true;\r\n    [this.nowScale] = this.tMatrix;\r\n    const cloneTMatrix = [...this.tMatrix];\r\n    if (this.nowScale !== 1 || this.tMatrix[4] !== 0) {\r\n      //scale不等于1，要重回1\r\n      cloneTMatrix[0] = 1;\r\n      cloneTMatrix[3] = 1;\r\n      cloneTMatrix[4] = 0;\r\n      cloneTMatrix[5] = 0;\r\n      // this.$emit('scaleChange', 1, this.poscenter);\r\n      this.scaleChange(1, this.poscenter);\r\n    } else {\r\n      const pointer = ev.center;\r\n      const scale = this.maxScale;\r\n      cloneTMatrix[0] = scale;\r\n      cloneTMatrix[3] = scale;\r\n      cloneTMatrix[4] = (1 - scale) * (pointer.x - this.center.x - this.left);\r\n      cloneTMatrix[5] = (1 - scale) * (pointer.y - this.top - this.center.y);\r\n      // this.$emit('scaleChange', scale, { x: pointer.x, y: pointer.y - this.top });\r\n      this.scaleChange(scale, { x: pointer.x - this.left, y: pointer.y - this.top });\r\n    }\r\n    this.tMatrix = cloneTMatrix;\r\n  }\r\n\r\n  // 回到初始状态\r\n  backState() {\r\n    const cloneTMatrix = [...this.tMatrix];\r\n    this.duration = true;\r\n    cloneTMatrix[0] = 1;\r\n    cloneTMatrix[3] = 1;\r\n    cloneTMatrix[4] = 0;\r\n    cloneTMatrix[5] = 0;\r\n    this.tMatrix = cloneTMatrix;\r\n    this.scaleChange(1);\r\n  }\r\n\r\n  @Emit('scaleChange')\r\n  // eslint-disable-next-line\r\n  scaleChange(scale: number, point = {}): object {\r\n    return { scale, point };\r\n  }\r\n\r\n  // eslint-disable-next-line\r\n  point2D(x: number, y: number): point2D {\r\n    console.log(this);\r\n    return { x, y };\r\n  }\r\n}\r\n</script>\r\n<style lang='scss'>\r\n.vue-scale {\r\n  background: #999;\r\n  // overflow: hidden;\r\n\r\n  .box {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    top: 0;\r\n    left: 0;\r\n    // transform-origin: center center;\r\n  }\r\n}\r\n</style>\r\n"]}]}