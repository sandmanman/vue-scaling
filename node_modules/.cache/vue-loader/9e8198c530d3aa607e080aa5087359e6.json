{"remainingRequest":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangyufan/em/testPro/vue-scale/src/components/button/Button.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/zhangyufan/em/testPro/vue-scale/src/components/button/Button.vue","mtime":1573474128000},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/css-loader/index.js","mtime":1573721989187},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1574242648574},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/postcss-loader/src/index.js","mtime":1573721998387},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/sass-loader/lib/loader.js","mtime":1574242652692},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/cache-loader/dist/cjs.js","mtime":1573721989004},{"path":"/Users/zhangyufan/em/testPro/vue-scale/node_modules/vue-loader/lib/index.js","mtime":1574242648574}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"button.scss\";\n",{"version":3,"sources":["Button.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqIA","file":"Button.vue","sourceRoot":"src/components/button","sourcesContent":["<template>\r\n  <button :type=\"htmlType\" :disabled=\"disabled\" :class=\"[\r\n    `${preName}${groupClass}`,\r\n    {\r\n      [`${preName}${groupClass}-${type}`]: type,\r\n      [`${preName}${groupClass}-${size}`]: size,\r\n      [`${preName}${groupClass}-ghost`]: ghost,\r\n      [`${preName}${groupClass}-loading`]: loading,\r\n      [`${preName}${groupClass}-click`]: clicked,\r\n      [`${preName}${groupClass}-disabled`]: disabled,\r\n      [`${preName}${groupClass}-on`]: status,\r\n      [`${preName}${groupClass}-${type}-on`]: type && status,\r\n      [`${preName}-icon${size?`-${size}`:''}`]: !$slots.default,\r\n    },\r\n    className,\r\n  ]\" @animationend=\"removeClickName($event)\" @click=\"clickFn($event)\">\r\n    <Icon\r\n      v-show=\"loading || !!$slots.icon\"\r\n      :color=\"colors[type] || colorDefult\"\r\n      :spin=\"loading\"\r\n    >\r\n      <slot name=\"icon\"></slot>\r\n    </Icon>\r\n    <span :class=\"[`${preName}-text`, {\r\n      [`${preName}-text-icon`]: loading || !!$slots.icon,\r\n      [`${preName}-primary-text`]: type === 'primary',\r\n      [`${preName}-text-icon-large`]: loading && size === 'large',\r\n      [`${preName}-text-icon-small`]: loading && size === 'small',\r\n    }]\" v-if=\"$slots.default\">\r\n      <slot></slot>\r\n    </span>\r\n  </button>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Prop,\r\n  Emit,\r\n  Inject,\r\n  Vue,\r\n} from 'vue-property-decorator';\r\nimport Icon from '../icon/Icon.vue';\r\nimport { findUpNode } from '../../helper/node';\r\nimport { colors, ColorEntity, colorDefult } from './colors';\r\n\r\n@Component({\r\n  components: {\r\n    Icon,\r\n  },\r\n})\r\nexport default class Button extends Vue {\r\n  name: string = 'Button';\r\n\r\n  preName: string = 'w-btn';\r\n\r\n  colors: ColorEntity = colors;\r\n\r\n  colorDefult: string = colorDefult;\r\n\r\n  clicked: boolean = false;\r\n\r\n  clickEvent: any = null;\r\n\r\n  @Prop(String) private type?: string;\r\n\r\n  @Prop(String) private size?: string;\r\n\r\n  @Prop({\r\n    type: String,\r\n    default: 'button',\r\n  }) private htmlType?: string;\r\n\r\n  @Prop(Boolean) private loading?: boolean;\r\n\r\n  @Prop(Boolean) private stop?: boolean;\r\n\r\n  @Prop(Boolean) private disabled?: boolean;\r\n\r\n  @Prop(Boolean) private ghost?: boolean;\r\n\r\n  @Prop([String, Object, Array]) private className!: string | object | any[];\r\n\r\n  @Prop({\r\n    type: Function,\r\n    default: () => {},\r\n  }) private click?: Function;\r\n\r\n  @Inject({\r\n    default: {\r\n      value: '',\r\n    },\r\n  }) private group!: any;\r\n\r\n  get status(): boolean {\r\n    return this.hasGroup && this.group.value === this.$attrs.value;\r\n  }\r\n\r\n  get hasGroup(): boolean {\r\n    return findUpNode(this, 'ButtonGroup') !== undefined;\r\n  }\r\n\r\n  get groupClass(): string {\r\n    return this.hasGroup ? '-wrap' : '';\r\n  }\r\n\r\n  clickFn(ev: MouseEvent) {\r\n    this.clicked = !this.loading;\r\n    this.clickEvent = ev;\r\n    if (this.stop) {\r\n      ev.stopPropagation();\r\n    }\r\n  }\r\n\r\n  @Emit('click')\r\n  removeClickName(ev: AnimationEvent) {\r\n    this.clicked = false;\r\n\r\n    const reParams = {\r\n      ev: this.clickEvent,\r\n      animEvent: ev,\r\n      key: this.$vnode.key,\r\n    };\r\n    (this.click as Function)(reParams);\r\n\r\n    this.clickEvent = null;\r\n\r\n    return reParams;\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  @import \"button.scss\";\r\n</style>\r\n"]}]}